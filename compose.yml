services:
  mysql_db:
    image: mysql:latest
    container_name: customer_db
    restart: always
    env_file: .env
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DB_NAME}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "${MYSQL_PORT}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ecommerce_network

  mongodb:
    image: mongo:latest
    container_name: product_db
    restart: always
    env_file: .env
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    ports:
      - "${MONGO_PORT}:27017"
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.runCommand({ ping: 1 })" ]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - ecommerce_network

  postgres_db:
    image: postgres:latest
    container_name: postgres_db
    restart: always
    env_file: .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-script:/docker-entrypoint-initdb.d
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ecommerce_network

  customer:
    build: ./customer-service
    container_name: customer_service
    restart: always
    env_file: .env
    depends_on:
      mysql_db:
        condition: service_healthy
    ports:
      - "8001:8000"
    volumes:
      - ./customer-service:/app:cached
    networks:
      - ecommerce_network

  product:
    build: ./product-service
    container_name: product_service
    restart: always
    env_file: .env
    depends_on:
      mongodb:
        condition: service_healthy
    ports:
      - "8002:8000"
    volumes:
      - ./product-service:/app:cached
    networks:
      - ecommerce_network

  cart:
    build: ./cart-service
    container_name: cart_service
    restart: always
    env_file: .env
    depends_on:
      postgres_db:
        condition: service_healthy
    environment:
      POSTGRES_DB: ${POSTGRES_CART_DB}
    ports:
      - "8003:8000"
    volumes:
      - ./cart-service:/app:cached
    networks:
      - ecommerce_network

#  order:
#    build: ./order-service
#    container_name: order_service
#    restart: always
#    env_file: .env
#    depends_on:
#      postgres_db:
#        condition: service_healthy
#    environment:
#      POSTGRES_DB: ${POSTGRES_ORDER_DB}
#    ports:
#      - "8004:8000"
#    volumes:
#      - ./order-service:/app:cached
#    networks:
#      - ecommerce_network
#
#  shipping:
#    build: ./shipping-service
#    container_name: shipping_service
#    restart: always
#    env_file: .env
#    depends_on:
#      postgres_db:
#        condition: service_healthy
#    environment:
#      POSTGRES_DB: ${POSTGRES_SHIPPING_DB}
#    ports:
#      - "8005:8000"
#    volumes:
#      - ./shipping-service:/app:cached
#    networks:
#      - ecommerce_network
#
#  payment:
#    build: ./payment-service
#    container_name: payment_service
#    restart: always
#    env_file: .env
#    depends_on:
#      postgres_db:
#        condition: service_healthy
#    environment:
#      POSTGRES_DB: ${POSTGRES_PAYMENT_DB}
#    ports:
#      - "8006:8000"
#    volumes:
#      - ./payment-service:/app:cached
#    networks:
#      - ecommerce_network

networks:
  ecommerce_network:
    driver: bridge

volumes:
  mysql_data:
  mongodb_data:
  postgres_data:
